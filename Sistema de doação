#include <stdio.h>
#include <string.h>
#include <locale.h>

#define MAX_USUARIOS 10
#define MAX_DOACOES 50

typedef struct {
    char nome[50];
    char senha[20];
} Usuario;

typedef struct {
    char instituicao[100];
    char tipo[20]; // Produto ou Monet√°ria
    char detalhes[200];
    char feedback[200];
} Doacao;

// Lista global de institui√ß√µes
const char *instituicoes[] = {
    "ASPAAN - Associa√ß√£o Protetora e Amiga dos Animais",
    "Patas Solid√°rias - Amigos em A√ß√£o",
    "SOS Animais An√°polis",
    "AADARPA - Abrigo dos Animais Refugiados",
    "Miau AuAu - Grupo de Prote√ß√£o Animal",
    "Abrigo Lar dos Animais - Goi√¢nia",
    "Vida Lata - Ajudando quem ajuda",
    "Focinho Caridoso - Associa√ß√£o em Prol da Vida",
    "SALVAR - Protetora dos Animais de Alto Para√≠so"
};

Usuario usuarios[MAX_USUARIOS];
int totalUsuarios = 0;
int usuarioLogado = -1;

Doacao historico[MAX_DOACOES];
int totalDoacoes = 0;

// ================== Fun√ß√µes auxiliares ==================

int diasNoMes(int mes, int ano) {
    if (mes == 2) return (ano % 4 == 0 && (ano % 100 != 0 || ano % 400 == 0)) ? 29 : 28;
    else if (mes == 4 || mes == 6 || mes == 9 || mes == 11) return 30;
    else return 31;
}

int dataValida(int d, int m, int a) {
    return (a >= 2024 && m >= 1 && m <= 12 && d >= 1 && d <= diasNoMes(m, a));
}

int horaValida(int h, int min) {
    return (h >= 0 && h <= 23 && min >= 0 && min <= 59);
}

void cadastrarUsuario() {
    if (totalUsuarios >= MAX_USUARIOS) {
        printf("\n[!] Limite de usu√°rios atingido!\n");
        return;
    }

    printf("\n--- Cadastro ---\n");
    printf("Nome de usu√°rio: ");
    scanf(" %[^\n]", usuarios[totalUsuarios].nome);
    printf("Senha: ");
    scanf(" %[^\n]", usuarios[totalUsuarios].senha);

    printf("\n‚úÖ Cadastro realizado com sucesso!\n");
    totalUsuarios++;
}

int login() {
    char nome[50], senha[20];
    printf("\n--- Login ---\n");
    printf("Nome de usu√°rio: ");
    scanf(" %[^\n]", nome);
    printf("Senha: ");
    scanf(" %[^\n]", senha);

    for (int i = 0; i < totalUsuarios; i++) {
        if (strcmp(nome, usuarios[i].nome) == 0 && strcmp(senha, usuarios[i].senha) == 0) {
            printf("\n‚úÖ Login realizado com sucesso!\n");
            usuarioLogado = i;
            return 1;
        }
    }

    printf("‚ùå Usu√°rio ou senha incorretos.\n");
    return 0;
}

void listarInstituicoes() {
    printf("\n--- Institui√ß√µes Dispon√≠veis ---\n\n");
    for (int i = 0; i < 9; i++) {
        printf("  %d. %s\n", i + 1, instituicoes[i]);
    }
    printf("\n");
}

void gerarFeedback(char *tipo, char *feedback) {
    if (strcmp(tipo, "Monet√°ria") == 0) {
        const char *mensagens[] = {
            "Gra√ßas √† sua contribui√ß√£o, conseguimos comprar 10kg de ra√ß√£o para nossos animais!",
            "Sua doa√ß√£o ajudou a custear atendimentos veterin√°rios esta semana!",
            "Com sua ajuda, compramos vacinas e medicamentos para os peludos."
        };
        strcpy(feedback, mensagens[totalDoacoes % 3]);
    } else {
        const char *mensagens[] = {
            "Os cobertores doados aqueceram nossos c√£es neste inverno!",
            "As ra√ß√µes alimentaram filhotes resgatados ‚Äî gratid√£o!",
            "Os brinquedos doados trouxeram alegria aos animais do abrigo!"
        };
        strcpy(feedback, mensagens[totalDoacoes % 3]);
    }
}

void registrarDoacao(char *instituicao, char *tipo, char *detalhes) {
    if (totalDoacoes < MAX_DOACOES) {
        strcpy(historico[totalDoacoes].instituicao, instituicao);
        strcpy(historico[totalDoacoes].tipo, tipo);
        strcpy(historico[totalDoacoes].detalhes, detalhes);
        gerarFeedback(tipo, historico[totalDoacoes].feedback);
        totalDoacoes++;
    }
}

void fazerDoacao() {
    listarInstituicoes();
    int escolha;
    printf("\nEscolha: ");
    scanf("%d", &escolha);

    if (escolha < 1 || escolha > 9) {
        printf("\n‚ùå Op√ß√£o inv√°lida.\n");
        return;
    }

    char instituicao[100];
    strcpy(instituicao, instituicoes[escolha - 1]);

    printf("\nTipo de doa√ß√£o:\n");
    printf("  1. Monet√°ria\n");
    printf("  2. Produto\n\n");
    printf("Escolha: ");
    int tipo;
    scanf("%d", &tipo);

    if (tipo == 1) {
        float valor;
        int forma;
        printf("\nValor da doa√ß√£o (R$): ");
        scanf("%f", &valor);

        printf("\nForma de pagamento:\n");
        printf("  1. Cart√£o\n");
        printf("  2. PIX\n");
        printf("  3. TED\n\n");
        printf("Escolha: ");
        scanf("%d", &forma);

        const char *formaTexto = (char*[]){"Cart√£o", "PIX", "TED"}[forma - 1];
        printf("\n‚ö†Ô∏è  Voc√™ est√° prestes a realizar uma doa√ß√£o de R$%.2f via %s.\nDeseja continuar? (S/N): ", valor, formaTexto);
        char confirmar;
        scanf(" %c", &confirmar);
        if (confirmar != 'S' && confirmar != 'S') {
            printf("\n‚ùå Doa√ß√£o cancelada.\n");
            return;
        }

        char detalhe[200];
        sprintf(detalhe, "Doa√ß√£o de R$%.2f via %s", valor, formaTexto);
        registrarDoacao(instituicao, "Monet√°ria", detalhe);
        printf("\n‚úÖ Doa√ß√£o realizada com sucesso!\n");

    } else if (tipo == 2) {
        const char *produtos[] = {
            "Pacote de Ra√ß√£o", "Produto de Limpeza", "Medicamento", "Antipulga / Carrapaticida",
            "Cobertor", "Toalha / Len√ßol", "Comedouro / Bebedouro", "Areia para Gatos",
            "Caixa de Transporte", "Cama Pet / Casinha", "Coleira / Guia", "Tapete Higi√™nico / Jornal",
            "Roupinha Pet", "Brinquedo"
        };

        int quantidades[14] = {0};
        int total;
        printf("\n--- Itens Dispon√≠veis ---\n");
        for (int i = 0; i < 14; i++) {
            printf("  %2d. %s\n", i + 1, produtos[i]);
        }

        printf("\nQuantos itens diferentes deseja doar? ");
        scanf("%d", &total);

        for (int i = 0; i < total; i++) {
            int pIndex, qtd;
            printf("\nN√∫mero do item: ");
            scanf("%d", &pIndex);

            if (pIndex < 1 || pIndex > 14) {
                printf("‚ùå Produto inv√°lido. Tente novamente.\n");
                i--; continue;
            }

            printf("Quantidade de '%s': ", produtos[pIndex - 1]);
            scanf("%d", &qtd);
            quantidades[pIndex - 1] += qtd;
        }

        int dia, mes, ano, hora, minuto;
        do {
            printf("\nData da entrega (dd mm aaaa): ");
            scanf("%d %d %d", &dia, &mes, &ano);
            if (!dataValida(dia, mes, ano)) {
                printf("‚ùå Data inv√°lida. Tente novamente.\n");
            }
        } while (!dataValida(dia, mes, ano));

        do {
            printf("Hor√°rio da entrega (hh mm): ");
            scanf("%d %d", &hora, &minuto);
            if (!horaValida(hora, minuto)) {
                printf("‚ùå Hor√°rio inv√°lido. Tente novamente.\n");
            }
        } while (!horaValida(hora, minuto));

        char detalhe[300] = "";
        strcat(detalhe, "Itens: ");
        for (int i = 0; i < 14; i++) {
            if (quantidades[i] > 0) {
                char temp[60];
                sprintf(temp, "%d x %s, ", quantidades[i], produtos[i]);
                strcat(detalhe, temp);
            }
        }

        char agendamento[60];
        sprintf(agendamento, "Entrega: %02d/%02d/%04d √†s %02dh%02d", dia, mes, ano, hora, minuto);
        strcat(detalhe, agendamento);

        printf("\n‚ö†Ô∏è  Voc√™ est√° prestes a agendar uma entrega para %s no dia %02d/%02d/%04d √†s %02dh%02d.\nDeseja continuar? (S/N): ",
               instituicao, dia, mes, ano, hora, minuto);
        char confirmar;
        scanf(" %c", &confirmar);
        if (confirmar != 'S' && confirmar != 'S') {
            printf("\n‚ùå Agendamento cancelado.\n");
            return;
        }

        registrarDoacao(instituicao, "Produto", detalhe);
        printf("\n‚úÖ Agendamento realizado com sucesso!\n");
    } else {
        printf("\n‚ùå Tipo inv√°lido.\n");
    }
}

void verHistorico() {
    printf("\n--- Hist√≥rico de Doa√ß√µes ---\n\n");
    if (totalDoacoes == 0) {
        printf("Nenhuma doa√ß√£o registrada.\n");
        return;
    }

    for (int i = 0; i < totalDoacoes; i++) {
        printf("[%d] %s - %s\n", i + 1, historico[i].instituicao, historico[i].tipo);
        printf("     Detalhes: %s\n", historico[i].detalhes);
        printf("     üêæ Feedback: %s\n\n", historico[i].feedback);
    }

    printf("Deseja:\n");
    printf("  1. Doar novamente\n");
    printf("  2. Voltar ao menu\n\n");
    printf("Escolha: ");
    int escolha;
    scanf("%d", &escolha);
    if (escolha == 1) {
        fazerDoacao();
    }
}

void sobreNPET() {
    printf("\n--- Sobre o NPET ---\n\n");
    printf("O NPET √© uma plataforma digital que conecta doadores a ONGs e abrigos que cuidam de animais em situa√ß√£o de rua. Desenvolvido em parceria com a UniEVANG√âLICA (Campus An√°polis), o projeto visa transformar a realidade de milhares de animais do estado de Goi√°s, fortalecendo organiza√ß√µes que dedicam suas vidas a essa causa.\n");

    printf("\n");
    
    printf("Acreditamos fortemente que toda doa√ß√£o deve ser acompanhada de confian√ßa e responsabilidade. Por isso, o NPET valoriza a transpar√™ncia em cada etapa: nossos doadores podem acompanhar suas contribui√ß√µes em tempo real, visualizando o impacto que est√£o gerando e fortalecendo ainda mais o elo entre quem ajuda e quem √© ajudado.\n");

    printf("\n");
    
    printf("[DADOS FICT√çCIOS!!!]\n");
    printf("IMPACTO: +900 animais beneficiados\n");
    printf("TEMPO: +2 anos de atua√ß√£o\n");
    printf("DOA√á√ïES: +200 doa√ß√µes realizadas\n");
    printf("PARCERIAS: +10 institui√ß√µes parceiras\n");
    printf("ABRANG√äNCIA: +10 cidades goianas\n");
    printf("SATISFA√á√ÉO: 98%% dos doadores satisfeitos.\n");
}

void menu() {
    int opcao;
    do {
        printf("\n=== Menu Principal ===\n");
        printf("  1. Fazer uma doa√ß√£o\n");
        printf("  2. Ver hist√≥rico de doa√ß√µes\n");
        printf("  3. Ver informa√ß√µes sobre o NPET\n");
        printf("  4. Sair\n\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: fazerDoacao(); break;
            case 2: verHistorico(); break;
            case 3: sobreNPET(); break;
            case 4: printf("\nSaindo... Obrigado por usar o NPET üíö\n"); break;
            default: printf("\n‚ùå Op√ß√£o inv√°lida.\n");
        }
    } while (opcao != 4);
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    printf("=== Bem-vindo ao NPET ===\n");
    int logado = 0;

    while (!logado) {
        printf("\n1. Cadastrar\n");
        printf("2. Login\n\n");
        printf("Escolha: ");
        int opcao;
        scanf("%d", &opcao);

        if (opcao == 1) {
            cadastrarUsuario();
        } else if (opcao == 2) {
            logado = login();
        } else {
            printf("\n‚ùå Op√ß√£o inv√°lida.\n");
        }
    }

    menu();
    return 0;
}
